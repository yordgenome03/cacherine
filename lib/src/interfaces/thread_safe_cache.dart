/// **スレッドセーフなキャッシュのインターフェース**
///
/// **マルチスレッド環境や非同期処理** に対応したキャッシュの基本機能を定義する抽象クラス。
/// - **非同期処理（`Future`）を利用してスレッドセーフなキャッシュ操作** を提供。
/// - **複数スレッドからのアクセスを安全に処理できるよう設計。**
abstract class ThreadSafeCache<K, V> {
  /// **キャッシュに格納されているすべてのキーを取得する。**
  ///
  /// **戻り値:** キャッシュに含まれるすべてのキーのリスト。
  Iterable<K> getKeys();

  /// **指定したキーに対応する値を取得する（非同期）。**
  ///
  /// - **キーが存在しない場合は `null` を返す。**
  ///
  /// **引数:**
  /// - `key`: 取得したいデータのキー。
  ///
  /// **戻り値:** `Future<V?>`（キーに対応する値、または `null`）。
  Future<V?> get(K key);

  /// **指定したキーと値をキャッシュに保存する（非同期）。**
  ///
  /// - 既存のキーを設定すると、対応する値を更新する。
  ///
  /// **引数:**
  /// - `key`: 保存するデータのキー。
  /// - `value`: 保存するデータの値。
  Future<void> set(K key, V value);

  /// **キャッシュ内のすべてのデータを削除する（非同期）。**
  Future<void> clear();
}
